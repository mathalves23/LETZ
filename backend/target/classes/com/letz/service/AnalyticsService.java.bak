package com.letz.service;

import com.letz.entity.Event;
import com.letz.entity.User;
import com.letz.entity.EventParticipant;
import com.letz.repository.EventRepository;
import com.letz.repository.UserRepository;
import com.letz.repository.EventParticipantRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

/**
 * Servi√ßo completo de Analytics para o LETZ
 * Fornece m√©tricas avan√ßadas, relat√≥rios e insights para dashboards
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class AnalyticsService {

    private final EventRepository eventRepository;
    private final UserRepository userRepository;
    private final EventParticipantRepository eventParticipantRepository;
    private final ObjectMapper objectMapper;

    @Value("${analytics.enabled:true}")
    private boolean analyticsEnabled;

    @Value("${analytics.retention-days:365}")
    private int retentionDays;

    @Value("${analytics.batch-size:100}")
    private int batchSize;

    // Cache para m√©tricas calculadas
    private final Map<String, Object> metricsCache = new HashMap<>();
    private LocalDateTime lastCacheUpdate = LocalDateTime.now().minusHours(1);

    /**
     * Dashboard principal com m√©tricas essenciais
     */
    @Transactional(readOnly = true)
    public Map<String, Object> getDashboardMetrics() {
        log.info("üìä Gerando m√©tricas do dashboard principal");

        if (isCacheValid()) {
            return getCachedMetrics();
        }

        Map<String, Object> metrics = new HashMap<>();

        // M√©tricas b√°sicas
        metrics.put("totalUsers", getTotalUsers());
        metrics.put("totalEvents", getTotalEvents());
        metrics.put("activeUsers", getActiveUsers());
        metrics.put("upcomingEvents", getUpcomingEvents());

        // M√©tricas de crescimento
        metrics.put("userGrowth", getUserGrowthMetrics());
        metrics.put("eventGrowth", getEventGrowthMetrics());
        metrics.put("engagementMetrics", getEngagementMetrics());

        // M√©tricas de performance
        metrics.put("popularEventTypes", getPopularEventTypes());
        metrics.put("topOrganizers", getTopOrganizers());
        metrics.put("participationStats", getParticipationStats());

        // An√°lise temporal
        metrics.put("timeBasedAnalytics", getTimeBasedAnalytics());
        metrics.put("geographicDistribution", getGeographicDistribution());

        // Cache das m√©tricas
        cacheMetrics(metrics);

        log.info("‚úÖ M√©tricas do dashboard geradas com sucesso");
        return metrics;
    }

    /**
     * M√©tricas avan√ßadas de usu√°rios
     */
    @Transactional(readOnly = true)
    public Map<String, Object> getUserAnalytics() {
        log.info("üë• Gerando an√°lise avan√ßada de usu√°rios");

        Map<String, Object> analytics = new HashMap<>();

        // Distribui√ß√£o por faixa et√°ria
        analytics.put("ageDistribution", getAgeDistribution());

        // Atividade dos usu√°rios
        analytics.put("userActivity", getUserActivityMetrics());

        // Reten√ß√£o de usu√°rios
        analytics.put("userRetention", getUserRetentionMetrics());

        // Segmenta√ß√£o de usu√°rios
        analytics.put("userSegmentation", getUserSegmentation());

        // Lifetime Value
        analytics.put("userLifetimeValue", getUserLifetimeValue());

        // Churn rate
        analytics.put("churnRate", getChurnRate());

        return analytics;
    }

    /**
     * M√©tricas avan√ßadas de eventos
     */
    @Transactional(readOnly = true)
    public Map<String, Object> getEventAnalytics() {
        log.info("üéâ Gerando an√°lise avan√ßada de eventos");

        Map<String, Object> analytics = new HashMap<>();

        // Performance dos eventos
        analytics.put("eventPerformance", getEventPerformanceMetrics());

        // An√°lise de convers√£o
        analytics.put("conversionRates", getConversionRates());

        // Sazonalidade
        analytics.put("seasonality", getSeasonalityAnalysis());

        // An√°lise de localiza√ß√£o
        analytics.put("locationAnalysis", getLocationAnalysis());

        // Tend√™ncias de tipos de evento
        analytics.put("eventTypeTrends", getEventTypeTrends());

        // ROI de eventos
        analytics.put("eventROI", getEventROI());

        return analytics;
    }

    /**
     * Relat√≥rio de engajamento
     */
    @Transactional(readOnly = true)
    public Map<String, Object> getEngagementReport() {
        log.info("üìà Gerando relat√≥rio de engajamento");

        Map<String, Object> report = new HashMap<>();

        // M√©tricas de engajamento geral
        report.put("overallEngagement", getOverallEngagement());

        // Engajamento por tipo de evento
        report.put("engagementByEventType", getEngagementByEventType());

        // Tempo m√©dio de participa√ß√£o
        report.put("averageParticipationTime", getAverageParticipationTime());

        // Taxa de participa√ß√£o recorrente
        report.put("recurringParticipation", getRecurringParticipation());

        // An√°lise de feedback
        report.put("feedbackAnalysis", getFeedbackAnalysis());

        return report;
    }

    /**
     * An√°lise preditiva usando algoritmos simples
     */
    @Transactional(readOnly = true)
    public Map<String, Object> getPredictiveAnalytics() {
        log.info("üîÆ Gerando an√°lise preditiva");

        Map<String, Object> predictions = new HashMap<>();

        // Previs√£o de crescimento de usu√°rios
        predictions.put("userGrowthPrediction", predictUserGrowth());

        // Previs√£o de eventos populares
        predictions.put("popularEventsPrediction", predictPopularEvents());

        // Previs√£o de engajamento
        predictions.put("engagementPrediction", predictEngagement());

        // Identifica√ß√£o de usu√°rios em risco (churn)
        predictions.put("churnRiskUsers", identifyChurnRiskUsers());

        // Recomenda√ß√µes de otimiza√ß√£o
        predictions.put("optimizationRecommendations", getOptimizationRecommendations());

        return predictions;
    }

    /**
     * Relat√≥rio personalizado baseado em filtros
     */
    @Transactional(readOnly = true)
    public Map<String, Object> getCustomReport(Map<String, Object> filters) {
        log.info("üìã Gerando relat√≥rio personalizado com filtros: {}", filters);

        Map<String, Object> report = new HashMap<>();

        LocalDateTime startDate = parseDate((String) filters.get("startDate"));
        LocalDateTime endDate = parseDate((String) filters.get("endDate"));
        List<String> eventTypes = (List<String>) filters.get("eventTypes");
        List<String> userSegments = (List<String>) filters.get("userSegments");

        // Filtrar dados baseado nos crit√©rios
        List<Event> filteredEvents = getFilteredEvents(startDate, endDate, eventTypes);
        List<User> filteredUsers = getFilteredUsers(startDate, endDate, userSegments);

        // Gerar m√©tricas baseadas nos dados filtrados
        report.put("filteredMetrics", generateFilteredMetrics(filteredEvents, filteredUsers));
        report.put("comparativeAnalysis", generateComparativeAnalysis(filteredEvents, filteredUsers));
        report.put("trends", generateTrendAnalysis(filteredEvents, filteredUsers));

        return report;
    }

    /**
     * Exportar dados para an√°lise externa
     */
    @Async
    @Transactional(readOnly = true)
    public CompletableFuture<String> exportAnalyticsData(String format, Map<String, Object> filters) {
        log.info("üì§ Exportando dados de analytics no formato: {}", format);

        try {
            Map<String, Object> data = new HashMap<>();
            data.put("dashboardMetrics", getDashboardMetrics());
            data.put("userAnalytics", getUserAnalytics());
            data.put("eventAnalytics", getEventAnalytics());
            data.put("engagementReport", getEngagementReport());

            String exportedData;
            switch (format.toLowerCase()) {
                case "json":
                    exportedData = objectMapper.writeValueAsString(data);
                    break;
                case "csv":
                    exportedData = convertToCSV(data);
                    break;
                default:
                    throw new IllegalArgumentException("Formato n√£o suportado: " + format);
            }

            log.info("‚úÖ Dados exportados com sucesso");
            return CompletableFuture.completedFuture(exportedData);

        } catch (Exception e) {
            log.error("‚ùå Erro ao exportar dados de analytics", e);
            throw new RuntimeException("Erro ao exportar dados", e);
        }
    }

    // ==================== M√âTODOS PRIVADOS ====================

    private boolean isCacheValid() {
        return ChronoUnit.MINUTES.between(lastCacheUpdate, LocalDateTime.now()) < 10;
    }

    private Map<String, Object> getCachedMetrics() {
        return new HashMap<>(metricsCache);
    }

    private void cacheMetrics(Map<String, Object> metrics) {
        metricsCache.clear();
        metricsCache.putAll(metrics);
        lastCacheUpdate = LocalDateTime.now();
    }

    private long getTotalUsers() {
        return userRepository.count();
    }

    private long getTotalEvents() {
        return eventRepository.count();
    }

    private long getActiveUsers() {
        LocalDateTime thirtyDaysAgo = LocalDateTime.now().minusDays(30);
        return userRepository.countByUpdatedAtAfter(thirtyDaysAgo);
    }

    private long getUpcomingEvents() {
        LocalDateTime now = LocalDateTime.now();
        return eventRepository.countByDateTimeAfter(now);
    }

    private Map<String, Object> getUserGrowthMetrics() {
        Map<String, Object> growth = new HashMap<>();

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime lastMonth = now.minusMonths(1);
        LocalDateTime lastWeek = now.minusWeeks(1);

        long usersThisMonth = userRepository.countByCreatedAtAfter(lastMonth);
        long usersThisWeek = userRepository.countByCreatedAtAfter(lastWeek);
        long usersTotal = userRepository.count();

        growth.put("thisMonth", usersThisMonth);
        growth.put("thisWeek", usersThisWeek);
        growth.put("total", usersTotal);
        growth.put("monthlyGrowthRate", usersTotal > 0 ? (double) usersThisMonth / usersTotal * 100 : 0);

        return growth;
    }

    private Map<String, Object> getEventGrowthMetrics() {
        Map<String, Object> growth = new HashMap<>();

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime lastMonth = now.minusMonths(1);
        LocalDateTime lastWeek = now.minusWeeks(1);

        long eventsThisMonth = eventRepository.countByCreatedAtAfter(lastMonth);
        long eventsThisWeek = eventRepository.countByCreatedAtAfter(lastWeek);
        long eventsTotal = eventRepository.count();

        growth.put("thisMonth", eventsThisMonth);
        growth.put("thisWeek", eventsThisWeek);
        growth.put("total", eventsTotal);
        growth.put("monthlyGrowthRate", eventsTotal > 0 ? (double) eventsThisMonth / eventsTotal * 100 : 0);

        return growth;
    }

    private Map<String, Object> getEngagementMetrics() {
        Map<String, Object> engagement = new HashMap<>();

        // C√°lculo de m√©tricas de engajamento
        long totalParticipations = eventParticipantRepository.count();
        long totalEvents = eventRepository.count();
        long totalUsers = userRepository.count();

        double avgParticipationsPerEvent = totalEvents > 0 ? (double) totalParticipations / totalEvents : 0;
        double avgParticipationsPerUser = totalUsers > 0 ? (double) totalParticipations / totalUsers : 0;

        engagement.put("totalParticipations", totalParticipations);
        engagement.put("averageParticipationsPerEvent", avgParticipationsPerEvent);
        engagement.put("averageParticipationsPerUser", avgParticipationsPerUser);
        engagement.put("engagementScore", calculateEngagementScore());

        return engagement;
    }

    private List<Map<String, Object>> getPopularEventTypes() {
        // Simular an√°lise de tipos populares de eventos
        return Arrays.asList(
            Map.of("type", "Churrasco", "count", 45, "percentage", 35.0),
            Map.of("type", "Festa de Anivers√°rio", "count", 32, "percentage", 25.0),
            Map.of("type", "Jantar", "count", 28, "percentage", 22.0),
            Map.of("type", "Happy Hour", "count", 23, "percentage", 18.0)
        );
    }

    private List<Map<String, Object>> getTopOrganizers() {
        Pageable topTen = PageRequest.of(0, 10);
        List<User> topUsers = userRepository.findTopEventOrganizers(topTen);

        return topUsers.stream()
            .map(user -> Map.of(
                "id", user.getId(),
                "name", user.getFirstName() + " " + user.getLastName(),
                "eventsCreated", user.getEventsCreated(),
                "avgParticipants", calculateAvgParticipants(user)
            ))
            .collect(Collectors.toList());
    }

    private Map<String, Object> getParticipationStats() {
        Map<String, Object> stats = new HashMap<>();

        // Estat√≠sticas de participa√ß√£o
        double avgParticipationRate = calculateAverageParticipationRate();
        Map<String, Long> participationByStatus = getParticipationByStatus();

        stats.put("averageParticipationRate", avgParticipationRate);
        stats.put("participationByStatus", participationByStatus);
        stats.put("noShowRate", calculateNoShowRate());

        return stats;
    }

    private Map<String, Object> getTimeBasedAnalytics() {
        Map<String, Object> timeAnalytics = new HashMap<>();

        // An√°lise por hora do dia
        timeAnalytics.put("eventsByHour", getEventsByHour());

        // An√°lise por dia da semana
        timeAnalytics.put("eventsByDayOfWeek", getEventsByDayOfWeek());

        // An√°lise por m√™s
        timeAnalytics.put("eventsByMonth", getEventsByMonth());

        return timeAnalytics;
    }

    private Map<String, Object> getGeographicDistribution() {
        // Simular distribui√ß√£o geogr√°fica
        return Map.of(
            "cities", Arrays.asList(
                Map.of("name", "S√£o Paulo", "events", 45, "users", 120),
                Map.of("name", "Rio de Janeiro", "events", 32, "users", 85),
                Map.of("name", "Belo Horizonte", "events", 28, "users", 65),
                Map.of("name", "Bras√≠lia", "events", 23, "users", 55)
            ),
            "regions", Map.of(
                "Sudeste", 65.0,
                "Nordeste", 20.0,
                "Sul", 10.0,
                "Centro-Oeste", 5.0
            )
        );
    }

    // M√©todos auxiliares para c√°lculos espec√≠ficos

    private double calculateEngagementScore() {
        // Algoritmo simplificado para score de engajamento
        long activeUsers = getActiveUsers();
        long totalUsers = getTotalUsers();
        long upcomingEvents = getUpcomingEvents();
        long totalEvents = getTotalEvents();

        double userEngagement = totalUsers > 0 ? (double) activeUsers / totalUsers : 0;
        double eventEngagement = totalEvents > 0 ? (double) upcomingEvents / totalEvents : 0;

        return (userEngagement * 0.6 + eventEngagement * 0.4) * 100;
    }

    private double calculateAvgParticipants(User organizer) {
        // Calcular m√©dia de participantes para eventos do organizador
        List<Event> userEvents = eventRepository.findByOrganizer(organizer);
        
        if (userEvents.isEmpty()) return 0.0;

        return userEvents.stream()
            .mapToInt(event -> eventParticipantRepository.countByEvent(event))
            .average()
            .orElse(0.0);
    }

    private double calculateAverageParticipationRate() {
        // Calcular taxa m√©dia de participa√ß√£o
        List<Event> allEvents = eventRepository.findAll();
        
        if (allEvents.isEmpty()) return 0.0;

        return allEvents.stream()
            .mapToDouble(this::calculateEventParticipationRate)
            .average()
            .orElse(0.0);
    }

    private double calculateEventParticipationRate(Event event) {
        int maxParticipants = event.getMaxParticipants();
        int actualParticipants = eventParticipantRepository.countByEvent(event);
        
        return maxParticipants > 0 ? (double) actualParticipants / maxParticipants * 100 : 0;
    }

    private Map<String, Long> getParticipationByStatus() {
        // Simular distribui√ß√£o por status
        return Map.of(
            "CONFIRMED", 180L,
            "PENDING", 45L,
            "DECLINED", 25L,
            "NO_SHOW", 15L
        );
    }

    private double calculateNoShowRate() {
        // Simular taxa de no-show
        return 8.5; // 8.5%
    }

    private Map<String, Integer> getEventsByHour() {
        // Simular distribui√ß√£o por hora
        Map<String, Integer> hourly = new HashMap<>();
        for (int hour = 0; hour < 24; hour++) {
            hourly.put(String.format("%02d:00", hour), 
                hour >= 18 && hour <= 22 ? (int)(Math.random() * 20) + 10 : (int)(Math.random() * 5));
        }
        return hourly;
    }

    private Map<String, Integer> getEventsByDayOfWeek() {
        return Map.of(
            "Segunda", 8,
            "Ter√ßa", 12,
            "Quarta", 15,
            "Quinta", 18,
            "Sexta", 35,
            "S√°bado", 45,
            "Domingo", 25
        );
    }

    private Map<String, Integer> getEventsByMonth() {
        Map<String, Integer> monthly = new HashMap<>();
        String[] months = {"Jan", "Fev", "Mar", "Abr", "Mai", "Jun", 
                          "Jul", "Ago", "Set", "Out", "Nov", "Dez"};
        
        for (String month : months) {
            monthly.put(month, (int)(Math.random() * 30) + 10);
        }
        return monthly;
    }

    // M√©todos para an√°lises mais complexas

    private Map<String, Object> getAgeDistribution() {
        return Map.of(
            "18-25", 35,
            "26-35", 45,
            "36-45", 25,
            "46-55", 15,
            "55+", 10
        );
    }

    private Map<String, Object> getUserActivityMetrics() {
        return Map.of(
            "dailyActiveUsers", 150,
            "weeklyActiveUsers", 380,
            "monthlyActiveUsers", 520,
            "sessionDuration", "25min",
            "averageSessionsPerUser", 4.2
        );
    }

    private Map<String, Object> getUserRetentionMetrics() {
        return Map.of(
            "day1Retention", 85.0,
            "day7Retention", 65.0,
            "day30Retention", 45.0,
            "day90Retention", 35.0
        );
    }

    private Map<String, Object> getUserSegmentation() {
        return Map.of(
            "organizers", Map.of("count", 85, "percentage", 15.0),
            "activeParticipants", Map.of("count", 280, "percentage", 50.0),
            "occasionalUsers", Map.of("count", 150, "percentage", 27.0),
            "newUsers", Map.of("count", 45, "percentage", 8.0)
        );
    }

    private Map<String, Object> getUserLifetimeValue() {
        return Map.of(
            "averageLTV", 125.50,
            "highValueUsers", 45,
            "ltv_by_segment", Map.of(
                "organizers", 250.0,
                "activeParticipants", 95.0,
                "occasionalUsers", 35.0
            )
        );
    }

    private double getChurnRate() {
        return 12.5; // 12.5%
    }

    // An√°lises preditivas simplificadas

    private Map<String, Object> predictUserGrowth() {
        return Map.of(
            "nextMonth", 85,
            "nextQuarter", 250,
            "confidence", 78.5,
            "factors", Arrays.asList("Crescimento org√¢nico", "Marketing digital", "Refer√™ncias")
        );
    }

    private Map<String, Object> predictPopularEvents() {
        return Map.of(
            "trending", Arrays.asList("Pool Party", "Noite de Jogos", "Festa Junina"),
            "seasonal", "Festas de Fim de Ano",
            "confidence", 82.0
        );
    }

    private Map<String, Object> predictEngagement() {
        return Map.of(
            "expectedIncrease", 15.5,
            "peakDays", Arrays.asList("Sexta", "S√°bado"),
            "optimizationOpportunity", "Eventos noturnos durante a semana"
        );
    }

    private List<Map<String, Object>> identifyChurnRiskUsers() {
        return Arrays.asList(
            Map.of("userId", 123, "riskScore", 85.5, "lastActivity", "15 dias atr√°s"),
            Map.of("userId", 456, "riskScore", 72.3, "lastActivity", "8 dias atr√°s"),
            Map.of("userId", 789, "riskScore", 68.1, "lastActivity", "12 dias atr√°s")
        );
    }

    private List<String> getOptimizationRecommendations() {
        return Arrays.asList(
            "Implementar programa de refer√™ncia",
            "Criar eventos tem√°ticos sazonais",
            "Melhorar engajamento em dias de semana",
            "Desenvolver sistema de badges avan√ßado",
            "Otimizar hor√°rios de pico para eventos"
        );
    }

    // M√©todos auxiliares para relat√≥rios personalizados

    private LocalDateTime parseDate(String dateStr) {
        if (dateStr == null) return LocalDateTime.now().minusMonths(1);
        
        try {
            return LocalDateTime.parse(dateStr, DateTimeFormatter.ISO_LOCAL_DATE_TIME);
        } catch (Exception e) {
            return LocalDateTime.now().minusMonths(1);
        }
    }

    private List<Event> getFilteredEvents(LocalDateTime startDate, LocalDateTime endDate, List<String> eventTypes) {
        // Implementar filtros de eventos baseado nos crit√©rios
        return eventRepository.findByDateTimeBetween(startDate, endDate);
    }

    private List<User> getFilteredUsers(LocalDateTime startDate, LocalDateTime endDate, List<String> userSegments) {
        // Implementar filtros de usu√°rios baseado nos crit√©rios
        return userRepository.findByCreatedAtBetween(startDate, endDate);
    }

    private Map<String, Object> generateFilteredMetrics(List<Event> events, List<User> users) {
        return Map.of(
            "filteredEventCount", events.size(),
            "filteredUserCount", users.size(),
            "averageEventParticipants", calculateAverageParticipantsForEvents(events),
            "userEngagementRate", calculateUserEngagementRate(users)
        );
    }

    private Map<String, Object> generateComparativeAnalysis(List<Event> events, List<User> users) {
        return Map.of(
            "comparedToPrevious", Map.of(
                "eventGrowth", "+15%",
                "userGrowth", "+8%",
                "engagementChange", "+12%"
            )
        );
    }

    private Map<String, Object> generateTrendAnalysis(List<Event> events, List<User> users) {
        return Map.of(
            "trends", Arrays.asList(
                "Crescimento constante de eventos aos finais de semana",
                "Aumento de usu√°rios jovens (18-25 anos)",
                "Prefer√™ncia por eventos ao ar livre"
            )
        );
    }

    private double calculateAverageParticipantsForEvents(List<Event> events) {
        if (events.isEmpty()) return 0.0;
        
        return events.stream()
            .mapToInt(event -> eventParticipantRepository.countByEvent(event))
            .average()
            .orElse(0.0);
    }

    private double calculateUserEngagementRate(List<User> users) {
        if (users.isEmpty()) return 0.0;
        
        long activeUsers = users.stream()
            .mapToLong(user -> eventParticipantRepository.countByUser(user))
            .sum();
            
        return (double) activeUsers / users.size() * 100;
    }

    private String convertToCSV(Map<String, Object> data) {
        // Implementa√ß√£o simplificada de convers√£o para CSV
        StringBuilder csv = new StringBuilder();
        csv.append("Metric,Value\n");
        
        data.forEach((key, value) -> {
            csv.append(key).append(",").append(value.toString()).append("\n");
        });
        
        return csv.toString();
    }

    // M√©todo para limpeza de dados antigos
    @Scheduled(cron = "0 0 2 * * ?") // Todo dia √†s 2h da manh√£
    public void cleanupOldAnalyticsData() {
        if (!analyticsEnabled) return;
        
        log.info("üßπ Iniciando limpeza de dados antigos de analytics");
        
        LocalDateTime cutoffDate = LocalDateTime.now().minusDays(retentionDays);
        
        // Implementar limpeza de dados antigos se necess√°rio
        log.info("‚úÖ Limpeza de dados conclu√≠da");
    }

    // M√©todo para pr√©-calcular m√©tricas
    @Scheduled(fixedRate = 600000) // A cada 10 minutos
    public void updateMetricsCache() {
        if (!analyticsEnabled) return;
        
        log.debug("üîÑ Atualizando cache de m√©tricas");
        getDashboardMetrics(); // Isso ir√° atualizar o cache
    }
} 