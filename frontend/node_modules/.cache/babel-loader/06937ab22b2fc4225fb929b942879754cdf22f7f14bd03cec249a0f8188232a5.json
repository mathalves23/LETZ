{"ast":null,"code":"import { eventAPI } from '../services/api';\nexport const testEventCreation = async () => {\n  try {\n    const eventData = {\n      title: \"Teste de Evento Frontend\",\n      description: \"Evento criado para teste do frontend\",\n      type: \"CHURRASCO\",\n      startDateTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(),\n      // Amanh達\n      location: \"Casa do Teste\",\n      isPrivate: true,\n      requiresApproval: false,\n      hasCostSharing: false\n    };\n    console.log('Enviando dados do evento:', eventData);\n    const response = await eventAPI.createEvent(eventData);\n    console.log('Evento criado com sucesso:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Erro ao criar evento:', error);\n    console.error('Resposta do erro:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n    throw error;\n  }\n};\nexport const testLogin = async () => {\n  try {\n    const loginData = {\n      email: \"admin@letz.com\",\n      password: \"admin123\"\n    };\n    console.log('Fazendo login...');\n    const response = await fetch('http://localhost:5005/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(loginData)\n    });\n    const data = await response.json();\n    if (data.token) {\n      localStorage.setItem('token', data.token);\n      console.log('Login realizado com sucesso, token salvo');\n      return data;\n    } else {\n      throw new Error('Token n達o recebido');\n    }\n  } catch (error) {\n    console.error('Erro no login:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["eventAPI","testEventCreation","eventData","title","description","type","startDateTime","Date","now","toISOString","location","isPrivate","requiresApproval","hasCostSharing","console","log","response","createEvent","data","error","_error$response","testLogin","loginData","email","password","fetch","method","headers","body","JSON","stringify","json","token","localStorage","setItem","Error"],"sources":["/Users/mdearaujo/Downloads/LETZ/frontend/src/utils/testEventCreation.ts"],"sourcesContent":["import { eventAPI } from '../services/api';\n\nexport const testEventCreation = async () => {\n  try {\n    const eventData = {\n      title: \"Teste de Evento Frontend\",\n      description: \"Evento criado para teste do frontend\",\n      type: \"CHURRASCO\",\n      startDateTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // Amanh達\n      location: \"Casa do Teste\",\n      isPrivate: true,\n      requiresApproval: false,\n      hasCostSharing: false\n    };\n\n    console.log('Enviando dados do evento:', eventData);\n    \n    const response = await eventAPI.createEvent(eventData);\n    \n    console.log('Evento criado com sucesso:', response.data);\n    return response.data;\n  } catch (error: any) {\n    console.error('Erro ao criar evento:', error);\n    console.error('Resposta do erro:', error.response?.data);\n    throw error;\n  }\n};\n\nexport const testLogin = async () => {\n  try {\n    const loginData = {\n      email: \"admin@letz.com\",\n      password: \"admin123\"\n    };\n\n    console.log('Fazendo login...');\n    \n    const response = await fetch('http://localhost:5005/api/auth/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(loginData)\n    });\n\n    const data = await response.json();\n    \n    if (data.token) {\n      localStorage.setItem('token', data.token);\n      console.log('Login realizado com sucesso, token salvo');\n      return data;\n    } else {\n      throw new Error('Token n達o recebido');\n    }\n  } catch (error) {\n    console.error('Erro no login:', error);\n    throw error;\n  }\n}; "],"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;AAE1C,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;EAC3C,IAAI;IACF,MAAMC,SAAS,GAAG;MAChBC,KAAK,EAAE,0BAA0B;MACjCC,WAAW,EAAE,sCAAsC;MACnDC,IAAI,EAAE,WAAW;MACjBC,aAAa,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC;MAAE;MACzEC,QAAQ,EAAE,eAAe;MACzBC,SAAS,EAAE,IAAI;MACfC,gBAAgB,EAAE,KAAK;MACvBC,cAAc,EAAE;IAClB,CAAC;IAEDC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEb,SAAS,CAAC;IAEnD,MAAMc,QAAQ,GAAG,MAAMhB,QAAQ,CAACiB,WAAW,CAACf,SAAS,CAAC;IAEtDY,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEC,QAAQ,CAACE,IAAI,CAAC;IACxD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;IAAA,IAAAC,eAAA;IACnBN,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7CL,OAAO,CAACK,KAAK,CAAC,mBAAmB,GAAAC,eAAA,GAAED,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,CAAC;IACxD,MAAMC,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF,MAAMC,SAAS,GAAG;MAChBC,KAAK,EAAE,gBAAgB;MACvBC,QAAQ,EAAE;IACZ,CAAC;IAEDV,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IAE/B,MAAMC,QAAQ,GAAG,MAAMS,KAAK,CAAC,sCAAsC,EAAE;MACnEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,SAAS;IAChC,CAAC,CAAC;IAEF,MAAMJ,IAAI,GAAG,MAAMF,QAAQ,CAACe,IAAI,CAAC,CAAC;IAElC,IAAIb,IAAI,CAACc,KAAK,EAAE;MACdC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEhB,IAAI,CAACc,KAAK,CAAC;MACzClB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvD,OAAOG,IAAI;IACb,CAAC,MAAM;MACL,MAAM,IAAIiB,KAAK,CAAC,oBAAoB,CAAC;IACvC;EACF,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}