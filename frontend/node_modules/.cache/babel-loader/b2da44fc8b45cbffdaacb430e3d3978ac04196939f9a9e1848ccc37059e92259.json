{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import{friendshipAPI}from'../../services/api';const initialState={friends:[],pendingRequests:[],sentRequests:[],isLoading:false,error:null};// Async thunks\nexport const fetchFriends=createAsyncThunk('friendships/fetchFriends',async(_,_ref)=>{let{rejectWithValue}=_ref;try{const response=await friendshipAPI.getFriends();return response.data;}catch(error){var _error$response,_error$response$data;return rejectWithValue(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Erro ao buscar amigos');}});export const fetchPendingRequests=createAsyncThunk('friendships/fetchPending',async(_,_ref2)=>{let{rejectWithValue}=_ref2;try{const response=await friendshipAPI.getPendingRequests();return response.data;}catch(error){var _error$response2,_error$response2$data;return rejectWithValue(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Erro ao buscar solicitações');}});export const fetchSentRequests=createAsyncThunk('friendships/fetchSent',async(_,_ref3)=>{let{rejectWithValue}=_ref3;try{const response=await friendshipAPI.getSentRequests();return response.data;}catch(error){var _error$response3,_error$response3$data;return rejectWithValue(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Erro ao buscar solicitações enviadas');}});export const sendFriendRequest=createAsyncThunk('friendships/sendRequest',async(userId,_ref4)=>{let{rejectWithValue}=_ref4;try{const response=await friendshipAPI.sendFriendRequest(userId);return response.data;}catch(error){var _error$response4,_error$response4$data;return rejectWithValue(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Erro ao enviar solicitação');}});export const acceptFriendRequest=createAsyncThunk('friendships/acceptRequest',async(friendshipId,_ref5)=>{let{rejectWithValue}=_ref5;try{const response=await friendshipAPI.acceptFriendRequest(friendshipId);return response.data;}catch(error){var _error$response5,_error$response5$data;return rejectWithValue(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Erro ao aceitar solicitação');}});export const rejectFriendRequest=createAsyncThunk('friendships/rejectRequest',async(friendshipId,_ref6)=>{let{rejectWithValue}=_ref6;try{await friendshipAPI.rejectFriendRequest(friendshipId);return friendshipId;}catch(error){var _error$response6,_error$response6$data;return rejectWithValue(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Erro ao rejeitar solicitação');}});export const removeFriend=createAsyncThunk('friendships/removeFriend',async(friendshipId,_ref7)=>{let{rejectWithValue}=_ref7;try{await friendshipAPI.removeFriend(friendshipId);return friendshipId;}catch(error){var _error$response7,_error$response7$data;return rejectWithValue(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||'Erro ao remover amigo');}});const friendshipSlice=createSlice({name:'friendships',initialState,reducers:{clearError:state=>{state.error=null;}},extraReducers:builder=>{builder// Fetch Friends\n.addCase(fetchFriends.pending,state=>{state.isLoading=true;state.error=null;}).addCase(fetchFriends.fulfilled,(state,action)=>{state.isLoading=false;state.friends=action.payload;state.error=null;}).addCase(fetchFriends.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Fetch Pending Requests\n.addCase(fetchPendingRequests.pending,state=>{state.isLoading=true;state.error=null;}).addCase(fetchPendingRequests.fulfilled,(state,action)=>{state.isLoading=false;state.pendingRequests=action.payload;state.error=null;}).addCase(fetchPendingRequests.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Fetch Sent Requests\n.addCase(fetchSentRequests.pending,state=>{state.isLoading=true;state.error=null;}).addCase(fetchSentRequests.fulfilled,(state,action)=>{state.isLoading=false;state.sentRequests=action.payload;state.error=null;}).addCase(fetchSentRequests.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Send Friend Request\n.addCase(sendFriendRequest.pending,state=>{state.isLoading=true;state.error=null;}).addCase(sendFriendRequest.fulfilled,(state,action)=>{state.isLoading=false;state.sentRequests.push(action.payload);state.error=null;}).addCase(sendFriendRequest.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Accept Friend Request\n.addCase(acceptFriendRequest.pending,state=>{state.isLoading=true;state.error=null;}).addCase(acceptFriendRequest.fulfilled,(state,action)=>{state.isLoading=false;const friendship=action.payload;// Remover das solicitações pendentes\nstate.pendingRequests=state.pendingRequests.filter(req=>req.id!==friendship.id);// Adicionar aos amigos\nstate.friends.push(friendship);state.error=null;}).addCase(acceptFriendRequest.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Reject Friend Request\n.addCase(rejectFriendRequest.pending,state=>{state.isLoading=true;state.error=null;}).addCase(rejectFriendRequest.fulfilled,(state,action)=>{state.isLoading=false;const friendshipId=action.payload;// Remover das solicitações pendentes\nstate.pendingRequests=state.pendingRequests.filter(req=>req.id!==friendshipId);state.error=null;}).addCase(rejectFriendRequest.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;})// Remove Friend\n.addCase(removeFriend.pending,state=>{state.isLoading=true;state.error=null;}).addCase(removeFriend.fulfilled,(state,action)=>{state.isLoading=false;const friendshipId=action.payload;// Remover dos amigos\nstate.friends=state.friends.filter(friend=>friend.id!==friendshipId);state.error=null;}).addCase(removeFriend.rejected,(state,action)=>{state.isLoading=false;state.error=action.payload;});}});export const{clearError}=friendshipSlice.actions;export default friendshipSlice.reducer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}