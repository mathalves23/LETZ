{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import{authAPI}from'../../services/api';const initialState={user:null,token:localStorage.getItem('token'),isAuthenticated:!!localStorage.getItem('token'),isLoading:false,error:null};// Async thunks\nexport const login=createAsyncThunk('auth/login',async(credentials,_ref)=>{let{rejectWithValue}=_ref;try{const response=await authAPI.login(credentials);localStorage.setItem('token',response.data.token);return response.data;}catch(error){var _error$response,_error$response$data;return rejectWithValue(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Erro ao fazer login');}});export const register=createAsyncThunk('auth/register',async(userData,_ref2)=>{let{rejectWithValue}=_ref2;try{const response=await authAPI.register(userData);localStorage.setItem('token',response.data.token);return response.data;}catch(error){var _error$response2,_error$response2$data;return rejectWithValue(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Erro ao registrar');}});export const logout=createAsyncThunk('auth/logout',async()=>{localStorage.removeItem('token');});const authSlice=createSlice({name:'auth',initialState,reducers:{clearError:state=>{state.error=null;},setUser:(state,action)=>{state.user=action.payload;}},extraReducers:builder=>{builder// Login\n.addCase(login.pending,state=>{state.isLoading=true;state.error=null;}).addCase(login.fulfilled,(state,action)=>{state.isLoading=false;state.isAuthenticated=true;state.user=action.payload.user;state.token=action.payload.token;state.error=null;}).addCase(login.rejected,(state,action)=>{state.isLoading=false;state.isAuthenticated=false;state.user=null;state.token=null;state.error=action.payload;})// Register\n.addCase(register.pending,state=>{state.isLoading=true;state.error=null;}).addCase(register.fulfilled,(state,action)=>{state.isLoading=false;state.isAuthenticated=true;state.user=action.payload.user;state.token=action.payload.token;state.error=null;}).addCase(register.rejected,(state,action)=>{state.isLoading=false;state.isAuthenticated=false;state.user=null;state.token=null;state.error=action.payload;})// Logout\n.addCase(logout.fulfilled,state=>{state.isAuthenticated=false;state.user=null;state.token=null;state.error=null;});}});export const{clearError,setUser}=authSlice.actions;export default authSlice.reducer;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}