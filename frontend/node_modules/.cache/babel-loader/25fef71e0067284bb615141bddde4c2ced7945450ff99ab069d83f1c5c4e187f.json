{"ast":null,"code":"import _objectSpread from\"/Users/mdearaujo/Downloads/LETZ/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback}from'react';/**\n * Hook personalizado para gerenciar funcionalidades PWA\n * Oferece controle completo sobre service worker, notifica√ß√µes, \n * cache, estado offline e instala√ß√£o\n */export const usePWA=()=>{var _Notification;// Estados\nconst[isOnline,setIsOnline]=useState(navigator.onLine);const[isInstallable,setIsInstallable]=useState(false);const[isInstalled,setIsInstalled]=useState(false);const[swRegistration,setSwRegistration]=useState(null);const[deferredPrompt,setDeferredPrompt]=useState(null);const[notificationPermission,setNotificationPermission]=useState(((_Notification=Notification)===null||_Notification===void 0?void 0:_Notification.permission)||'default');const[isLoading,setIsLoading]=useState(false);const[cacheStatus,setCacheStatus]=useState('idle');// ============================================\n// DETEC√á√ÉO DE CONEX√ÉO\n// ============================================\nuseEffect(()=>{const handleOnline=()=>{setIsOnline(true);console.log('üü¢ LETZ PWA: Conex√£o restaurada');// Sincronizar dados pendentes\nsyncPendingData();};const handleOffline=()=>{setIsOnline(false);console.log('üî¥ LETZ PWA: Conex√£o perdida');};window.addEventListener('online',handleOnline);window.addEventListener('offline',handleOffline);return()=>{window.removeEventListener('online',handleOnline);window.removeEventListener('offline',handleOffline);};},[]);// ============================================\n// SERVICE WORKER\n// ============================================\nuseEffect(()=>{if('serviceWorker'in navigator){registerServiceWorker();}},[]);const registerServiceWorker=async()=>{try{const registration=await navigator.serviceWorker.register('/sw.js',{scope:'/',updateViaCache:'none'});setSwRegistration(registration);console.log('‚úÖ LETZ PWA: Service Worker registrado');// Ouvir atualiza√ß√µes do SW\nregistration.addEventListener('updatefound',()=>{const newWorker=registration.installing;newWorker.addEventListener('statechange',()=>{if(newWorker.state==='installed'&&navigator.serviceWorker.controller){console.log('üîÑ LETZ PWA: Nova vers√£o dispon√≠vel');// Notificar usu√°rio sobre atualiza√ß√£o\nshowUpdateNotification();}});});// Ouvir mensagens do SW\nnavigator.serviceWorker.addEventListener('message',handleSWMessage);}catch(error){console.error('‚ùå LETZ PWA: Erro ao registrar Service Worker:',error);}};const handleSWMessage=event=>{const{type,data}=event.data;switch(type){case'CACHE_UPDATED':setCacheStatus('updated');console.log('üì¶ LETZ PWA: Cache atualizado');break;case'OFFLINE_READY':setCacheStatus('ready');console.log('üì± LETZ PWA: App pronto para uso offline');break;case'SHARED_CONTENT':handleSharedContent(data);break;default:console.log('üì® LETZ PWA: Mensagem do SW:',event.data);}};// ============================================\n// INSTALA√á√ÉO PWA\n// ============================================\nuseEffect(()=>{// Detectar se o app j√° est√° instalado\nif(window.matchMedia('(display-mode: standalone)').matches){setIsInstalled(true);}// Ouvir evento de instala√ß√£o\nconst handleBeforeInstallPrompt=e=>{e.preventDefault();setDeferredPrompt(e);setIsInstallable(true);console.log('üì≤ LETZ PWA: App pode ser instalado');};const handleAppInstalled=()=>{setIsInstalled(true);setIsInstallable(false);setDeferredPrompt(null);console.log('‚úÖ LETZ PWA: App instalado com sucesso');};window.addEventListener('beforeinstallprompt',handleBeforeInstallPrompt);window.addEventListener('appinstalled',handleAppInstalled);return()=>{window.removeEventListener('beforeinstallprompt',handleBeforeInstallPrompt);window.removeEventListener('appinstalled',handleAppInstalled);};},[]);const installApp=async()=>{if(!deferredPrompt)return false;setIsLoading(true);try{// Mostrar prompt de instala√ß√£o\ndeferredPrompt.prompt();// Aguardar resposta do usu√°rio\nconst{outcome}=await deferredPrompt.userChoice;if(outcome==='accepted'){console.log('üéâ LETZ PWA: Usu√°rio aceitou instalar');setIsInstallable(false);setDeferredPrompt(null);return true;}else{console.log('‚ùå LETZ PWA: Usu√°rio recusou instalar');return false;}}catch(error){console.error('‚ùå LETZ PWA: Erro na instala√ß√£o:',error);return false;}finally{setIsLoading(false);}};// ============================================\n// NOTIFICA√á√ïES\n// ============================================\nconst requestNotificationPermission=async()=>{if(!('Notification'in window)){console.warn('‚ö†Ô∏è LETZ PWA: Notifica√ß√µes n√£o suportadas');return false;}if(Notification.permission==='granted'){return true;}const permission=await Notification.requestPermission();setNotificationPermission(permission);if(permission==='granted'){console.log('üîî LETZ PWA: Permiss√£o de notifica√ß√£o concedida');// Configurar push notifications se SW dispon√≠vel\nif(swRegistration){await subscribeToPushNotifications();}return true;}console.log('‚ùå LETZ PWA: Permiss√£o de notifica√ß√£o negada');return false;};const subscribeToPushNotifications=async()=>{if(!swRegistration)return;try{// Chave p√∫blica VAPID seria obtida do backend\nconst vapidPublicKey=process.env.REACT_APP_VAPID_PUBLIC_KEY||'BEl62iUYgUivxIkv69yViEuiBIa40HI2eaa7ufLdqgKGRbCWJcYYoXYgSz5nWJD_qFOEm_T4vVP3pTWWMM7DqSM';const subscription=await swRegistration.pushManager.subscribe({userVisibleOnly:true,applicationServerKey:vapidPublicKey});console.log('üì≤ LETZ PWA: Inscrito em push notifications');// Enviar subscription para o backend\nawait sendSubscriptionToServer(subscription);}catch(error){console.error('‚ùå LETZ PWA: Erro ao inscrever em push notifications:',error);}};const showNotification=function(title){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(Notification.permission!=='granted')return;const defaultOptions={icon:'/icons/icon-192x192.png',badge:'/icons/badge-72x72.png',vibrate:[200,100,200],data:{timestamp:Date.now()}};if(swRegistration){// Usar SW para notifica√ß√µes\nswRegistration.showNotification(title,_objectSpread(_objectSpread({},defaultOptions),options));}else{// Fallback para notifica√ß√£o direta\nnew Notification(title,_objectSpread(_objectSpread({},defaultOptions),options));}};// ============================================\n// CACHE E SINCRONIZA√á√ÉO\n// ============================================\nconst clearCache=async()=>{if(!('caches'in window))return;try{const cacheNames=await caches.keys();await Promise.all(cacheNames.map(cacheName=>caches.delete(cacheName)));setCacheStatus('cleared');console.log('üóëÔ∏è LETZ PWA: Cache limpo');// Recarregar para obter vers√£o fresca\nwindow.location.reload();}catch(error){console.error('‚ùå LETZ PWA: Erro ao limpar cache:',error);}};const updateApp=async()=>{if(!swRegistration)return;try{await swRegistration.update();console.log('üîÑ LETZ PWA: Verificando atualiza√ß√µes...');}catch(error){console.error('‚ùå LETZ PWA: Erro ao atualizar:',error);}};const syncPendingData=useCallback(async()=>{if(!swRegistration||!isOnline)return;try{// Disparar background sync para diferentes tipos de dados\nawait swRegistration.sync.register('sync-events');await swRegistration.sync.register('send-messages');console.log('üîÑ LETZ PWA: Sincroniza√ß√£o iniciada');}catch(error){console.error('‚ùå LETZ PWA: Erro na sincroniza√ß√£o:',error);}},[swRegistration,isOnline]);// ============================================\n// COMPARTILHAMENTO\n// ============================================\nconst shareContent=async data=>{if(navigator.share){try{await navigator.share(data);console.log('üì§ LETZ PWA: Conte√∫do compartilhado');return true;}catch(error){if(error.name!=='AbortError'){console.error('‚ùå LETZ PWA: Erro ao compartilhar:',error);}return false;}}else{// Fallback para navegadores sem Web Share API\ncopyToClipboard(data.url||data.text);return true;}};const copyToClipboard=async text=>{try{await navigator.clipboard.writeText(text);showNotification('LETZ',{body:'Link copiado para a √°rea de transfer√™ncia!',tag:'clipboard'});}catch(error){console.error('‚ùå LETZ PWA: Erro ao copiar:',error);}};// ============================================\n// FUN√á√ïES AUXILIARES\n// ============================================\nconst handleSharedContent=sharedData=>{console.log('üì§ LETZ PWA: Conte√∫do compartilhado recebido:',sharedData);// Dispatch evento personalizado para a aplica√ß√£o\nwindow.dispatchEvent(new CustomEvent('sharedcontent',{detail:sharedData}));};const showUpdateNotification=()=>{showNotification('LETZ Atualizado!',{body:'Nova vers√£o dispon√≠vel. Toque para atualizar.',tag:'app-update',requireInteraction:true,actions:[{action:'update',title:'Atualizar',icon:'/icons/action-update.png'},{action:'later',title:'Depois',icon:'/icons/action-close.png'}]});};const sendSubscriptionToServer=async subscription=>{try{const response=await fetch('/api/push/subscribe',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(subscription)});if(response.ok){console.log('‚úÖ LETZ PWA: Subscription enviada para servidor');}}catch(error){console.error('‚ùå LETZ PWA: Erro ao enviar subscription:',error);}};// ============================================\n// RETURN HOOK\n// ============================================\nreturn{// Estados\nisOnline,isInstallable,isInstalled,isLoading,notificationPermission,cacheStatus,swRegistration,// Func√µes de instala√ß√£o\ninstallApp,// Fun√ß√µes de notifica√ß√£o\nrequestNotificationPermission,showNotification,// Fun√ß√µes de cache e sincroniza√ß√£o\nclearCache,updateApp,syncPendingData,// Fun√ß√µes de compartilhamento\nshareContent,copyToClipboard,// Utilit√°rios\nisSupported:{serviceWorker:'serviceWorker'in navigator,notifications:'Notification'in window,share:'share'in navigator,installPrompt:'BeforeInstallPromptEvent'in window||window.BeforeInstallPromptEvent,push:'PushManager'in window,backgroundSync:'serviceWorker'in navigator&&'sync'in window.ServiceWorkerRegistration.prototype}};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}