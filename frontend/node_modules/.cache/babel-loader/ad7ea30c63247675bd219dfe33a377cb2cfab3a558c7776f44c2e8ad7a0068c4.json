{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\n\n/**\n * Hook personalizado para gerenciar funcionalidades PWA\n * Oferece controle completo sobre service worker, notificações, \n * cache, estado offline e instalação\n */\nexport const usePWA = () => {\n  _s();\n  var _Notification;\n  // Estados\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isInstallable, setIsInstallable] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n  const [swRegistration, setSwRegistration] = useState(null);\n  const [deferredPrompt, setDeferredPrompt] = useState(null);\n  const [notificationPermission, setNotificationPermission] = useState(((_Notification = Notification) === null || _Notification === void 0 ? void 0 : _Notification.permission) || 'default');\n  const [isLoading, setIsLoading] = useState(false);\n  const [cacheStatus, setCacheStatus] = useState('idle');\n\n  // ============================================\n  // DETECÇÃO DE CONEXÃO\n  // ============================================\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      console.log('🟢 LETZ PWA: Conexão restaurada');\n\n      // Sincronizar dados pendentes\n      syncPendingData();\n    };\n    const handleOffline = () => {\n      setIsOnline(false);\n      console.log('🔴 LETZ PWA: Conexão perdida');\n    };\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // ============================================\n  // SERVICE WORKER\n  // ============================================\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      registerServiceWorker();\n    }\n  }, []);\n  const registerServiceWorker = async () => {\n    try {\n      const registration = await navigator.serviceWorker.register('/sw.js', {\n        scope: '/',\n        updateViaCache: 'none'\n      });\n      setSwRegistration(registration);\n      console.log('✅ LETZ PWA: Service Worker registrado');\n\n      // Ouvir atualizações do SW\n      registration.addEventListener('updatefound', () => {\n        const newWorker = registration.installing;\n        newWorker.addEventListener('statechange', () => {\n          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n            console.log('🔄 LETZ PWA: Nova versão disponível');\n            // Notificar usuário sobre atualização\n            showUpdateNotification();\n          }\n        });\n      });\n\n      // Ouvir mensagens do SW\n      navigator.serviceWorker.addEventListener('message', handleSWMessage);\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao registrar Service Worker:', error);\n    }\n  };\n  const handleSWMessage = event => {\n    const {\n      type,\n      data\n    } = event.data;\n    switch (type) {\n      case 'CACHE_UPDATED':\n        setCacheStatus('updated');\n        console.log('📦 LETZ PWA: Cache atualizado');\n        break;\n      case 'OFFLINE_READY':\n        setCacheStatus('ready');\n        console.log('📱 LETZ PWA: App pronto para uso offline');\n        break;\n      case 'SHARED_CONTENT':\n        handleSharedContent(data);\n        break;\n      default:\n        console.log('📨 LETZ PWA: Mensagem do SW:', event.data);\n    }\n  };\n\n  // ============================================\n  // INSTALAÇÃO PWA\n  // ============================================\n  useEffect(() => {\n    // Detectar se o app já está instalado\n    if (window.matchMedia('(display-mode: standalone)').matches) {\n      setIsInstalled(true);\n    }\n\n    // Ouvir evento de instalação\n    const handleBeforeInstallPrompt = e => {\n      e.preventDefault();\n      setDeferredPrompt(e);\n      setIsInstallable(true);\n      console.log('📲 LETZ PWA: App pode ser instalado');\n    };\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setIsInstallable(false);\n      setDeferredPrompt(null);\n      console.log('✅ LETZ PWA: App instalado com sucesso');\n    };\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n  const installApp = async () => {\n    if (!deferredPrompt) return false;\n    setIsLoading(true);\n    try {\n      // Mostrar prompt de instalação\n      deferredPrompt.prompt();\n\n      // Aguardar resposta do usuário\n      const {\n        outcome\n      } = await deferredPrompt.userChoice;\n      if (outcome === 'accepted') {\n        console.log('🎉 LETZ PWA: Usuário aceitou instalar');\n        setIsInstallable(false);\n        setDeferredPrompt(null);\n        return true;\n      } else {\n        console.log('❌ LETZ PWA: Usuário recusou instalar');\n        return false;\n      }\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro na instalação:', error);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // ============================================\n  // NOTIFICAÇÕES\n  // ============================================\n  const requestNotificationPermission = async () => {\n    if (!('Notification' in window)) {\n      console.warn('⚠️ LETZ PWA: Notificações não suportadas');\n      return false;\n    }\n    if (Notification.permission === 'granted') {\n      return true;\n    }\n    const permission = await Notification.requestPermission();\n    setNotificationPermission(permission);\n    if (permission === 'granted') {\n      console.log('🔔 LETZ PWA: Permissão de notificação concedida');\n\n      // Configurar push notifications se SW disponível\n      if (swRegistration) {\n        await subscribeToPushNotifications();\n      }\n      return true;\n    }\n    console.log('❌ LETZ PWA: Permissão de notificação negada');\n    return false;\n  };\n  const subscribeToPushNotifications = async () => {\n    if (!swRegistration) return;\n    try {\n      // Chave pública VAPID seria obtida do backend\n      const vapidPublicKey = process.env.REACT_APP_VAPID_PUBLIC_KEY || 'BEl62iUYgUivxIkv69yViEuiBIa40HI2eaa7ufLdqgKGRbCWJcYYoXYgSz5nWJD_qFOEm_T4vVP3pTWWMM7DqSM';\n      const subscription = await swRegistration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: vapidPublicKey\n      });\n      console.log('📲 LETZ PWA: Inscrito em push notifications');\n\n      // Enviar subscription para o backend\n      await sendSubscriptionToServer(subscription);\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao inscrever em push notifications:', error);\n    }\n  };\n  const showNotification = (title, options = {}) => {\n    if (Notification.permission !== 'granted') return;\n    const defaultOptions = {\n      icon: '/icons/icon-192x192.png',\n      badge: '/icons/badge-72x72.png',\n      vibrate: [200, 100, 200],\n      data: {\n        timestamp: Date.now()\n      }\n    };\n    if (swRegistration) {\n      // Usar SW para notificações\n      swRegistration.showNotification(title, {\n        ...defaultOptions,\n        ...options\n      });\n    } else {\n      // Fallback para notificação direta\n      new Notification(title, {\n        ...defaultOptions,\n        ...options\n      });\n    }\n  };\n\n  // ============================================\n  // CACHE E SINCRONIZAÇÃO\n  // ============================================\n  const clearCache = async () => {\n    if (!('caches' in window)) return;\n    try {\n      const cacheNames = await caches.keys();\n      await Promise.all(cacheNames.map(cacheName => caches.delete(cacheName)));\n      setCacheStatus('cleared');\n      console.log('🗑️ LETZ PWA: Cache limpo');\n\n      // Recarregar para obter versão fresca\n      window.location.reload();\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao limpar cache:', error);\n    }\n  };\n  const updateApp = async () => {\n    if (!swRegistration) return;\n    try {\n      await swRegistration.update();\n      console.log('🔄 LETZ PWA: Verificando atualizações...');\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao atualizar:', error);\n    }\n  };\n  const syncPendingData = useCallback(async () => {\n    if (!swRegistration || !isOnline) return;\n    try {\n      // Disparar background sync para diferentes tipos de dados\n      await swRegistration.sync.register('sync-events');\n      await swRegistration.sync.register('send-messages');\n      console.log('🔄 LETZ PWA: Sincronização iniciada');\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro na sincronização:', error);\n    }\n  }, [swRegistration, isOnline]);\n\n  // ============================================\n  // COMPARTILHAMENTO\n  // ============================================\n  const shareContent = async data => {\n    if (navigator.share) {\n      try {\n        await navigator.share(data);\n        console.log('📤 LETZ PWA: Conteúdo compartilhado');\n        return true;\n      } catch (error) {\n        if (error.name !== 'AbortError') {\n          console.error('❌ LETZ PWA: Erro ao compartilhar:', error);\n        }\n        return false;\n      }\n    } else {\n      // Fallback para navegadores sem Web Share API\n      copyToClipboard(data.url || data.text);\n      return true;\n    }\n  };\n  const copyToClipboard = async text => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showNotification('LETZ', {\n        body: 'Link copiado para a área de transferência!',\n        tag: 'clipboard'\n      });\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao copiar:', error);\n    }\n  };\n\n  // ============================================\n  // FUNÇÕES AUXILIARES\n  // ============================================\n  const handleSharedContent = sharedData => {\n    console.log('📤 LETZ PWA: Conteúdo compartilhado recebido:', sharedData);\n\n    // Dispatch evento personalizado para a aplicação\n    window.dispatchEvent(new CustomEvent('sharedcontent', {\n      detail: sharedData\n    }));\n  };\n  const showUpdateNotification = () => {\n    showNotification('LETZ Atualizado!', {\n      body: 'Nova versão disponível. Toque para atualizar.',\n      tag: 'app-update',\n      requireInteraction: true,\n      actions: [{\n        action: 'update',\n        title: 'Atualizar',\n        icon: '/icons/action-update.png'\n      }, {\n        action: 'later',\n        title: 'Depois',\n        icon: '/icons/action-close.png'\n      }]\n    });\n  };\n  const sendSubscriptionToServer = async subscription => {\n    try {\n      const response = await fetch('/api/push/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(subscription)\n      });\n      if (response.ok) {\n        console.log('✅ LETZ PWA: Subscription enviada para servidor');\n      }\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao enviar subscription:', error);\n    }\n  };\n\n  // ============================================\n  // RETURN HOOK\n  // ============================================\n  return {\n    // Estados\n    isOnline,\n    isInstallable,\n    isInstalled,\n    isLoading,\n    notificationPermission,\n    cacheStatus,\n    swRegistration,\n    // Funcões de instalação\n    installApp,\n    // Funções de notificação\n    requestNotificationPermission,\n    showNotification,\n    // Funções de cache e sincronização\n    clearCache,\n    updateApp,\n    syncPendingData,\n    // Funções de compartilhamento\n    shareContent,\n    copyToClipboard,\n    // Utilitários\n    isSupported: {\n      serviceWorker: 'serviceWorker' in navigator,\n      notifications: 'Notification' in window,\n      share: 'share' in navigator,\n      installPrompt: 'BeforeInstallPromptEvent' in window || window.BeforeInstallPromptEvent,\n      push: 'PushManager' in window,\n      backgroundSync: 'serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype\n    }\n  };\n};\n_s(usePWA, \"FDGICxJ9seMxAdqXlFPswg4xERI=\");","map":{"version":3,"names":["useState","useEffect","useCallback","usePWA","_s","_Notification","isOnline","setIsOnline","navigator","onLine","isInstallable","setIsInstallable","isInstalled","setIsInstalled","swRegistration","setSwRegistration","deferredPrompt","setDeferredPrompt","notificationPermission","setNotificationPermission","Notification","permission","isLoading","setIsLoading","cacheStatus","setCacheStatus","handleOnline","console","log","syncPendingData","handleOffline","window","addEventListener","removeEventListener","registerServiceWorker","registration","serviceWorker","register","scope","updateViaCache","newWorker","installing","state","controller","showUpdateNotification","handleSWMessage","error","event","type","data","handleSharedContent","matchMedia","matches","handleBeforeInstallPrompt","e","preventDefault","handleAppInstalled","installApp","prompt","outcome","userChoice","requestNotificationPermission","warn","requestPermission","subscribeToPushNotifications","vapidPublicKey","process","env","REACT_APP_VAPID_PUBLIC_KEY","subscription","pushManager","subscribe","userVisibleOnly","applicationServerKey","sendSubscriptionToServer","showNotification","title","options","defaultOptions","icon","badge","vibrate","timestamp","Date","now","clearCache","cacheNames","caches","keys","Promise","all","map","cacheName","delete","location","reload","updateApp","update","sync","shareContent","share","name","copyToClipboard","url","text","clipboard","writeText","body","tag","sharedData","dispatchEvent","CustomEvent","detail","requireInteraction","actions","action","response","fetch","method","headers","JSON","stringify","ok","isSupported","notifications","installPrompt","BeforeInstallPromptEvent","push","backgroundSync","ServiceWorkerRegistration","prototype"],"sources":["/Users/mdearaujo/Downloads/LETZ/frontend/src/hooks/usePWA.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n/**\n * Hook personalizado para gerenciar funcionalidades PWA\n * Oferece controle completo sobre service worker, notificações, \n * cache, estado offline e instalação\n */\nexport const usePWA = () => {\n  // Estados\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [isInstallable, setIsInstallable] = useState(false);\n  const [isInstalled, setIsInstalled] = useState(false);\n  const [swRegistration, setSwRegistration] = useState(null);\n  const [deferredPrompt, setDeferredPrompt] = useState(null);\n  const [notificationPermission, setNotificationPermission] = useState(\n    Notification?.permission || 'default'\n  );\n  const [isLoading, setIsLoading] = useState(false);\n  const [cacheStatus, setCacheStatus] = useState('idle');\n\n  // ============================================\n  // DETECÇÃO DE CONEXÃO\n  // ============================================\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true);\n      console.log('🟢 LETZ PWA: Conexão restaurada');\n      \n      // Sincronizar dados pendentes\n      syncPendingData();\n    };\n\n    const handleOffline = () => {\n      setIsOnline(false);\n      console.log('🔴 LETZ PWA: Conexão perdida');\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // ============================================\n  // SERVICE WORKER\n  // ============================================\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      registerServiceWorker();\n    }\n  }, []);\n\n  const registerServiceWorker = async () => {\n    try {\n      const registration = await navigator.serviceWorker.register('/sw.js', {\n        scope: '/',\n        updateViaCache: 'none'\n      });\n\n      setSwRegistration(registration);\n      console.log('✅ LETZ PWA: Service Worker registrado');\n\n      // Ouvir atualizações do SW\n      registration.addEventListener('updatefound', () => {\n        const newWorker = registration.installing;\n        \n        newWorker.addEventListener('statechange', () => {\n          if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n            console.log('🔄 LETZ PWA: Nova versão disponível');\n            // Notificar usuário sobre atualização\n            showUpdateNotification();\n          }\n        });\n      });\n\n      // Ouvir mensagens do SW\n      navigator.serviceWorker.addEventListener('message', handleSWMessage);\n\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao registrar Service Worker:', error);\n    }\n  };\n\n  const handleSWMessage = (event) => {\n    const { type, data } = event.data;\n\n    switch (type) {\n      case 'CACHE_UPDATED':\n        setCacheStatus('updated');\n        console.log('📦 LETZ PWA: Cache atualizado');\n        break;\n      \n      case 'OFFLINE_READY':\n        setCacheStatus('ready');\n        console.log('📱 LETZ PWA: App pronto para uso offline');\n        break;\n      \n      case 'SHARED_CONTENT':\n        handleSharedContent(data);\n        break;\n      \n      default:\n        console.log('📨 LETZ PWA: Mensagem do SW:', event.data);\n    }\n  };\n\n  // ============================================\n  // INSTALAÇÃO PWA\n  // ============================================\n  useEffect(() => {\n    // Detectar se o app já está instalado\n    if (window.matchMedia('(display-mode: standalone)').matches) {\n      setIsInstalled(true);\n    }\n\n    // Ouvir evento de instalação\n    const handleBeforeInstallPrompt = (e) => {\n      e.preventDefault();\n      setDeferredPrompt(e);\n      setIsInstallable(true);\n      console.log('📲 LETZ PWA: App pode ser instalado');\n    };\n\n    const handleAppInstalled = () => {\n      setIsInstalled(true);\n      setIsInstallable(false);\n      setDeferredPrompt(null);\n      console.log('✅ LETZ PWA: App instalado com sucesso');\n    };\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n    window.addEventListener('appinstalled', handleAppInstalled);\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);\n      window.removeEventListener('appinstalled', handleAppInstalled);\n    };\n  }, []);\n\n  const installApp = async () => {\n    if (!deferredPrompt) return false;\n\n    setIsLoading(true);\n    \n    try {\n      // Mostrar prompt de instalação\n      deferredPrompt.prompt();\n      \n      // Aguardar resposta do usuário\n      const { outcome } = await deferredPrompt.userChoice;\n      \n      if (outcome === 'accepted') {\n        console.log('🎉 LETZ PWA: Usuário aceitou instalar');\n        setIsInstallable(false);\n        setDeferredPrompt(null);\n        return true;\n      } else {\n        console.log('❌ LETZ PWA: Usuário recusou instalar');\n        return false;\n      }\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro na instalação:', error);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // ============================================\n  // NOTIFICAÇÕES\n  // ============================================\n  const requestNotificationPermission = async () => {\n    if (!('Notification' in window)) {\n      console.warn('⚠️ LETZ PWA: Notificações não suportadas');\n      return false;\n    }\n\n    if (Notification.permission === 'granted') {\n      return true;\n    }\n\n    const permission = await Notification.requestPermission();\n    setNotificationPermission(permission);\n\n    if (permission === 'granted') {\n      console.log('🔔 LETZ PWA: Permissão de notificação concedida');\n      \n      // Configurar push notifications se SW disponível\n      if (swRegistration) {\n        await subscribeToPushNotifications();\n      }\n      \n      return true;\n    }\n\n    console.log('❌ LETZ PWA: Permissão de notificação negada');\n    return false;\n  };\n\n  const subscribeToPushNotifications = async () => {\n    if (!swRegistration) return;\n\n    try {\n      // Chave pública VAPID seria obtida do backend\n      const vapidPublicKey = process.env.REACT_APP_VAPID_PUBLIC_KEY || \n        'BEl62iUYgUivxIkv69yViEuiBIa40HI2eaa7ufLdqgKGRbCWJcYYoXYgSz5nWJD_qFOEm_T4vVP3pTWWMM7DqSM';\n\n      const subscription = await swRegistration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: vapidPublicKey\n      });\n\n      console.log('📲 LETZ PWA: Inscrito em push notifications');\n      \n      // Enviar subscription para o backend\n      await sendSubscriptionToServer(subscription);\n      \n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao inscrever em push notifications:', error);\n    }\n  };\n\n  const showNotification = (title, options = {}) => {\n    if (Notification.permission !== 'granted') return;\n\n    const defaultOptions = {\n      icon: '/icons/icon-192x192.png',\n      badge: '/icons/badge-72x72.png',\n      vibrate: [200, 100, 200],\n      data: { timestamp: Date.now() }\n    };\n\n    if (swRegistration) {\n      // Usar SW para notificações\n      swRegistration.showNotification(title, {\n        ...defaultOptions,\n        ...options\n      });\n    } else {\n      // Fallback para notificação direta\n      new Notification(title, {\n        ...defaultOptions,\n        ...options\n      });\n    }\n  };\n\n  // ============================================\n  // CACHE E SINCRONIZAÇÃO\n  // ============================================\n  const clearCache = async () => {\n    if (!('caches' in window)) return;\n\n    try {\n      const cacheNames = await caches.keys();\n      await Promise.all(\n        cacheNames.map(cacheName => caches.delete(cacheName))\n      );\n      \n      setCacheStatus('cleared');\n      console.log('🗑️ LETZ PWA: Cache limpo');\n      \n      // Recarregar para obter versão fresca\n      window.location.reload();\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao limpar cache:', error);\n    }\n  };\n\n  const updateApp = async () => {\n    if (!swRegistration) return;\n\n    try {\n      await swRegistration.update();\n      console.log('🔄 LETZ PWA: Verificando atualizações...');\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao atualizar:', error);\n    }\n  };\n\n  const syncPendingData = useCallback(async () => {\n    if (!swRegistration || !isOnline) return;\n\n    try {\n      // Disparar background sync para diferentes tipos de dados\n      await swRegistration.sync.register('sync-events');\n      await swRegistration.sync.register('send-messages');\n      \n      console.log('🔄 LETZ PWA: Sincronização iniciada');\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro na sincronização:', error);\n    }\n  }, [swRegistration, isOnline]);\n\n  // ============================================\n  // COMPARTILHAMENTO\n  // ============================================\n  const shareContent = async (data) => {\n    if (navigator.share) {\n      try {\n        await navigator.share(data);\n        console.log('📤 LETZ PWA: Conteúdo compartilhado');\n        return true;\n      } catch (error) {\n        if (error.name !== 'AbortError') {\n          console.error('❌ LETZ PWA: Erro ao compartilhar:', error);\n        }\n        return false;\n      }\n    } else {\n      // Fallback para navegadores sem Web Share API\n      copyToClipboard(data.url || data.text);\n      return true;\n    }\n  };\n\n  const copyToClipboard = async (text) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showNotification('LETZ', {\n        body: 'Link copiado para a área de transferência!',\n        tag: 'clipboard'\n      });\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao copiar:', error);\n    }\n  };\n\n  // ============================================\n  // FUNÇÕES AUXILIARES\n  // ============================================\n  const handleSharedContent = (sharedData) => {\n    console.log('📤 LETZ PWA: Conteúdo compartilhado recebido:', sharedData);\n    \n    // Dispatch evento personalizado para a aplicação\n    window.dispatchEvent(new CustomEvent('sharedcontent', {\n      detail: sharedData\n    }));\n  };\n\n  const showUpdateNotification = () => {\n    showNotification('LETZ Atualizado!', {\n      body: 'Nova versão disponível. Toque para atualizar.',\n      tag: 'app-update',\n      requireInteraction: true,\n      actions: [\n        { action: 'update', title: 'Atualizar', icon: '/icons/action-update.png' },\n        { action: 'later', title: 'Depois', icon: '/icons/action-close.png' }\n      ]\n    });\n  };\n\n  const sendSubscriptionToServer = async (subscription) => {\n    try {\n      const response = await fetch('/api/push/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(subscription)\n      });\n\n      if (response.ok) {\n        console.log('✅ LETZ PWA: Subscription enviada para servidor');\n      }\n    } catch (error) {\n      console.error('❌ LETZ PWA: Erro ao enviar subscription:', error);\n    }\n  };\n\n  // ============================================\n  // RETURN HOOK\n  // ============================================\n  return {\n    // Estados\n    isOnline,\n    isInstallable,\n    isInstalled,\n    isLoading,\n    notificationPermission,\n    cacheStatus,\n    swRegistration,\n\n    // Funcões de instalação\n    installApp,\n\n    // Funções de notificação\n    requestNotificationPermission,\n    showNotification,\n\n    // Funções de cache e sincronização\n    clearCache,\n    updateApp,\n    syncPendingData,\n\n    // Funções de compartilhamento\n    shareContent,\n    copyToClipboard,\n\n    // Utilitários\n    isSupported: {\n      serviceWorker: 'serviceWorker' in navigator,\n      notifications: 'Notification' in window,\n      share: 'share' in navigator,\n      installPrompt: 'BeforeInstallPromptEvent' in window || window.BeforeInstallPromptEvent,\n      push: 'PushManager' in window,\n      backgroundSync: 'serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype\n    }\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}